/**
 * 网络公共类
 * by dily
 * (c) copyright 2014 - 2035
 * All Rights Reserved. 
 * 存放网络公共方法 
 * 注意：是同步请求，不是异步
 */
module SocketManager {

    var sock: egret.WebSocket = new egret.WebSocket();
    var Message_class:any = null;

    //连接服务器
    export function connectServer(host: string = "", port: number = 80) {
        //Global.showWaritPanel();
        this.sock = new egret.WebSocket();
        this.sock.type = egret.WebSocket.TYPE_BINARY;
        this.sock.addEventListener(egret.ProgressEvent.SOCKET_DATA, this.onReceiveMessage, this);
        this.sock.addEventListener(egret.Event.CONNECT, this.onSocketOpen, this);
        this.sock.addEventListener(egret.Event.CLOSE, this.onSocketClose, this);
        this.sock.addEventListener(egret.IOErrorEvent.IO_ERROR, this.onSocketError, this);
        this.sock.connectByUrl(host);
    }

    export function onSocketClose():void {
        egret.log("WebSocketClose");
    }

    export function onSocketError():void {
       egret.log("WebSocketError");
    }
    //连接成功返回
    export function onSocketOpen(): void {
        //egret.log("Socket Open");
       if(this.Message_class == null){
             App.Proto  = dcodeIO.ProtoBuf.loadProto(RES.getRes("Protocol_proto"));
             this.Message_class = App.Proto.build("GameMessage");
        }
        App.MessageCenter.dispatch(LobbyConst.SOCKET_OPEN);
    }

    //消息返回  
    export function onReceiveMessage(): void {
       // Global.hideWaritPanel();
        var revData: egret.ByteArray = new egret.ByteArray();
        this.sock.readBytes(revData);
        var message = this.Message_class.decode(revData.buffer);
        // console.log("ReceiveMessage : "+ message.messageType +"_"+ message.cmd + " : " +egret.getTimer());
        App.MessageCenter.dispatch(message.messageType +"_"+ message.cmd,message.data);
    }

    //向服务端发送消息
    export function sendMessage(mainId: number,subId: number,msg: any): void {
         // Global.showWaritPanel();
         //console.log("SendMessage : "+ mainId +"_" + subId+ " : " +egret.getTimer());
         var mymsg = new this.Message_class();
         mymsg.messageType = mainId;
         mymsg.cmd = subId;
         mymsg.data = msg;
        var sendMsg: egret.ByteArray = new egret.ByteArray();
        var bytes = mymsg.toArrayBuffer();
        sendMsg.writeBytes(new egret.ByteArray(bytes));
        this.sock.writeBytes(sendMsg);
    }
}

/*
 // 1. 读取proto文件
        var message = dcodeIO.ProtoBuf.loadProto(RES.getRes("template_proto"));
        
        //2. 获取类定义
        var user_login_class = message.build("user_login");
        //3. 新建类
        var user_login = new user_login_class();
        user_login.userId = 123;
        user_login.userName = "peter";
       
        //4. 将类转成字节
        var bytes = user_login.toArrayBuffer();
        
        //5. 将字节写入ByteArray，待发送
        var sendData = new egret.ByteArray(bytes);
        var sendByteArray  = new egret.ByteArray();
        sendByteArray.writeInt(1);
        sendByteArray.writeBytes(sendData);
        //6. socket 发送
        // var socket:egret.WebSocket = new egret.WebSocket();
        // socket.writeBytes(sendByteArray);
        //socket.flush();
        console.log("发送数据:", user_login);
        
        //-------------接收定义----------------
        //1. 读取proto文件
        var message = dcodeIO.ProtoBuf.loadProto(RES.getRes("template_proto"));
        
        //2. 获取类定义
        var user_login_class = message.build("user_login");
            
        //3. 读取数据
        // var revByteArray:egret.ByteArray = new egret.ByteArray();
        // var socket:egret.WebSocket = new egret.WebSocket();
        // socket.readBytes(revByteArray);
        //  var cmd = revByteArray.readInt();
        // var revData:egret.ByteArray = new egret.ByteArray();
        // revByteArray.readBytes(revData);
        //由于没有socket，这里直接将发送数据等于接收数据
        var revByteArray:egret.ByteArray = sendByteArray;
        revByteArray.position = 0;
        var cmd = revByteArray.readInt();
        var revData:egret.ByteArray = new egret.ByteArray();
        revByteArray.readBytes(revData);
       
        //4. 反序列化
        var user_login = user_login_class.decode(revData.buffer);
        console.log("接收数据：", user_login);
        
        */



