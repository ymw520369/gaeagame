enum AreaType {
		Dragon,Tie,Tiger
}
enum CGStatus {
  IDEL,READY,BET,BILL 
}
class DragonController extends eui.Component{
    private chip_1: eui.ToggleButton;
    private chip_2: eui.ToggleButton;
    private chip_3: eui.ToggleButton;
    private chip_4: eui.ToggleButton;
    private chip_0: eui.ToggleButton;
    private card_1:eui.Image;
    private card_1_back:eui.Image;
    private card_2:eui.Image;
    private card_2_back:eui.Image;
    private timeImg:eui.Image;

    private tieArea:BetArea;
    private tigerArea:BetArea;
    private dragonArea:BetArea;
    public settlePop:SettlePop;

    private _dragonValue:number = 0;
    private _tigerValue:number = 0;

    private creditText:eui.Label;
    private timeText:eui.Label;
    
    private _chipIndex:number = 0;
    private _chipValueArray:Array<number>;
    private _chipArray:Array<eui.ToggleButton>;
    private _chipValue:number = 10;
    private _chipPool:Array<eui.Image> = [];
    private _areaArray:Array<BetArea>;
  
    private _timer:egret.Timer;
    private _credit:number = 10000;
    private _cardData:Object;
    private _winAreaType:number = 0;
    private _isBet:boolean = false;
    private _gameInfo:any = null;

    private betTime:number = 8;
    private billTime:number = 9;
    private idelTime:number = 10;
    private currStatus:number=-1;

	constructor() {
        super();
        this.addEventListener( eui.UIEvent.COMPLETE, this.uiCompHandler, this );
        this.skinName = "resource/game/dragon/skin/dragonSkin.exml";
        //this.addEventListener(egret.Event.REMOVED,this.doClear,this);
        this.initListener();
       
    }
    private doClear():void{
       // App.MessageCenter.removeRegister(1200,1202,this.doRoomSC,this);  
        App.MessageCenter.removeRegister(1200,1204,this.doGameStutasSC,this);
        App.MessageCenter.removeRegister(1200,1206,this.doBetSC,this);
        App.MessageCenter.removeRegister(1200,1208,this.doSettleSC,this); 
    }

    private initListener():void{
        //App.MessageCenter.register(1200,1202,this.doRoomSC,this);
        App.MessageCenter.register(1200,1204,this.doGameStutasSC,this);
        App.MessageCenter.register(1200,1206,this.doBetSC,this);
        App.MessageCenter.register(1200,1208,this.doSettleSC,this);
    }

    private uiCompHandler():void {
        this.initData(); 
        this.initTimer();   
        this.initView();
    }

    private initData():void{
        var data = App.GlobalData.gameData;
        var info = data.lhdConfigInfo;
        this.dragonArea.odds  = info.longOdds;
        this.tieArea.odds = info.heOdds;
        this.tigerArea.odds = info.huOdds;
        this.betTime = info.betTime;
        this.billTime = info.billTime;
        this.idelTime =  info.idelTime;
        this._chipIndex = info.defaultBet;
        this._chipValueArray  = info.chips;
        this._chipValue = info.chips[info.defaultBet];  
        this._credit = App.GlobalData.role.money; 
    }

    private initView():void{
        this.settlePop.visible = false;
        this.timeImg.visible = false;
        this.timeText.text = "";
        this.creditText.text = this._credit.toString();
        this._chipArray = [this.chip_0,this.chip_1,this.chip_2,this.chip_3,this.chip_4];
        var len =  this._chipValueArray.length;
        let label:string = "";
        let val:number = 0;
        for(let j:number=0; j<len; j++){
            val = Number(this._chipValueArray[j]);
            if(val<1000)label = val.toString();
            else label = val/1000 + "k";
            this._chipArray[j].label = label;
        }
        this._areaArray = [this.dragonArea,this.tieArea,this.tigerArea];
        let chip:eui.ToggleButton;
        for(let i:number =0 ; i< 5; i++){
            chip = this._chipArray[i];
            chip.addEventListener( egret.TouchEvent.TOUCH_TAP, this.doSelectChip, this );
        }
       
        for (let j:number=0; j< 3; j++){
            let area:BetArea = this._areaArray[j];
            area.addEventListener(egret.TouchEvent.TOUCH_TAP,this.doTouchArea,this);
            area.type = j;
        }
        this._cardData = RES.getRes("poker_config_json");
        this.doStatus(App.GlobalData.gameData.currentStatus);  
    }
 

    private initTimer(){
        this._timer = new egret.Timer(1000,0);
        this._timer.addEventListener(egret.TimerEvent.TIMER,this.timerFunc,this);
        this._timer.addEventListener(egret.TimerEvent.TIMER_COMPLETE,this.timerComFunc,this);
    }

    private timerFunc(event:egret.TimerEvent) {
        var time:number = (<egret.Timer>event.target).currentCount;
        //egret.log(time.toString());
        if(time < this.betTime){
           this.timeText.text = (this.betTime - time).toString();
        }
    }

    private doStatus(status:number):void{
          this.resume(status);
         if(status == CGStatus.READY){
              Toast.launch("准备开始");
             // egret.log("status : ready");
         }else if(status == CGStatus.BET){
              //egret.log("status : bet");
             Toast.launch("请押注");
             this._timer.start();
             this.timeImg.visible = true;
             this._isBet = true;
             App.SoundManager.playEffect("ding_mp3");
         }else if(status == CGStatus.BILL){
             this._isBet = false;
            // egret.log("status : bill");
             this._timer.stop();
             this.timeText.text= "";
             this.timeImg.visible = false;
             Toast.launch("停止押注");
         }else if(status == CGStatus.IDEL){
           // egret.log("status : idel");
            this.reset();
         }

         this.currStatus = status;
    }

    public resume(status:number):void{
        if(App.GlobalData.isResume){
            App.GlobalData.isResume = false;
            if( this.currStatus == status)return;
            if(status != CGStatus.BET){
                this.timeImg.visible = false;
                this.timeText.text = "";
            }
             if(status != CGStatus.BILL){
                this.settlePop.hide();
            }
        }
        
    }

    private timerComFunc(event: egret.TimerEvent) {
        egret.log("timerComFunc count" + (<egret.Timer>event.target).currentCount);
    }

    private doSelectChip( evt:egret.TouchEvent ):void{
        let chip:eui.ToggleButton = evt.target;
        chip.selected = true;
        let i = this._chipArray.indexOf(chip);
        if(i != this._chipIndex){
            this._chipArray[this._chipIndex].selected = false;
            this._chipIndex = i;
        }  
        this._chipValue = this._chipValueArray[i];
    }

    private doTouchArea(evt:egret.TouchEvent):void{
        if(!this._isBet) return;
        if(this._credit < this._chipValue)return;
        let area:BetArea = evt.target; 
        let end:egret.Point = area.getChipPos();
        let chip:eui.ToggleButton = this._chipArray[this._chipIndex];
        let start:egret.Point = chip.localToGlobal(chip.width*0.5,chip.height*0.5);
        this.flyChip(start,end,area);
    }
    

    private openCard(front:eui.Image, back:eui.Image):void{
        //  egret.log("openCard");
        back.scaleX = 0.8;
        front.scaleX = 0;
        egret.Tween.get(back).to({ scaleX: 0 }, 400, egret.Ease.backIn).call(() => {
            egret.Tween.get(front).to({ scaleX: 0.8 }, 400, egret.Ease.backOut);
          
        });
    }

     private closeCard(front:eui.Image, back:eui.Image):void{
        egret.Tween.get(front).to({ scaleX: 0 }, 400, egret.Ease.backIn).call(() => {
            egret.Tween.get(back).to({ scaleX: 0.8 }, 400, egret.Ease.backOut);
        });
    }


    private sendCard(args:any):void{
       // egret.log("sendCard");
       let c:number = args[0];
       let d:number = args[1];
       this.card_1.source = RES.getRes("poker_json."+this._cardData[c].res);
       this._dragonValue = this._cardData[c].value;
       this.card_2.source = RES.getRes("poker_json."+this._cardData[d].res);
       this._tigerValue = this._cardData[d].value;
      // egret.log(this._cardData[c].res);
        //egret.log(this._cardData[d].res);
       this.openReward();
    }

    private reset():void{
       // egret.log("reset");
        this.closeCard(this.card_1,this.card_1_back);
        this.closeCard(this.card_2,this.card_2_back);
        
        for(let area of this._areaArray){
             area.reset();
         }
        this._timer.reset();
        this.settlePop.hide();
        Toast.launch("休息一会");
    }
    
    private flyChip(start:egret.Point,end:egret.Point,area:BetArea):void{
        let img:eui.Image = this.getChipByPool();
        this.addChild(img);
        img.x = start.x;
        img.y = start.y;
        egret.Tween.get(img).to({x:end.x,y:end.y}, 500, egret.Ease.backOut).call(() => {
            this.removeChild(img);
            this._chipPool.push(img);
            if(this._isBet && (this._credit >= this._chipValue)){
                area.addBet(this._chipValue);
                this._credit = Number(this._credit) - this._chipValue;
                this.creditText.text = this._credit.toString();
                this.doBetCS(area.type,this._chipValue);
            } 
        });
    }
    private intervalID:number = 0;
    private settleAccounts(param:any):void{
        if(this._dragonValue > this._tigerValue){
            this._winAreaType = AreaType.Dragon;   
        }else if(this._dragonValue == this._tigerValue){
           this._winAreaType = AreaType.Tie;  
        }else{
            this._winAreaType = AreaType.Tiger;  
        }
        var sum:number = 0;
        let area:BetArea;
        for (let j:number=0; j< 3; j++){
            area = this._areaArray[j];
            area.settle(this._winAreaType);
             sum += area.winCoin;
        }
        area = this._areaArray[this._winAreaType];
        App.EffectUtils.macIconShake(area.roleImg,area.roleImg.y);
       //this.changeCredit(sum);  
       if(param.playerBet > 0){
            this.settlePop.show(param.playerWinMoney,param.totalWinMoney);
            //this._credit = Number(param.playerMoney);
           // this.creditText.text = this.credit.toString();
           this.intervalID = egret.setInterval(this.addCredit,this,100,[param.playerWinMoney,param.playerMoney]);
       }
    }

     private addCredit(obj:any):void{
        let win:number = obj[0];
        let total:number = obj[1];
        let dt:number = Math.round(win * 0.02);
        if(dt < 1)dt = 1;
        let money:number = Number(this._credit) + dt;
        if(money > total){
            money = total;
            egret.clearInterval(this.intervalID);
        }
        this._credit =  money;
        this.creditText.text = money.toString();
    }

    private getChipByPool():eui.Image {
        let chip:eui.Image;
        if(this._chipPool.length > 0){
            chip = this._chipPool.pop();
        }else{
            chip = new eui.Image();
            chip.source = RES.getRes("catdog_ui_json.coin");
        }
        return chip;
    }

    private changeCredit(value:number):void{
        this._credit = Number(this._credit) + value;
        this.creditText.text = this._credit.toString();
    }
    
    private openReward(){
        //egret.log("openReward");
        this.openCard(this.card_1,this.card_1_back);
        this.openCard(this.card_2,this.card_2_back);
    }

    private doBetCS(areaIndex:number,money:number):void{
         //console.log("doBetCS");
         var BetMessage_class = App.Proto.build("BetMessage");
         var bet = new BetMessage_class();
         bet.betArea = areaIndex;
         bet.betMoney = money;
         var bytes = bet.toArrayBuffer();
         SocketManager.sendMessage(1200,1203,bytes);
    }
    
     private doBetSC(param):void{
         //egret.log("doBetSC");
         var MyClass = App.Proto.build("LHDBetStatusData");
         var obj = MyClass.decode(param);
         var arr = obj.betAreaDtos; 
         for (let j:number=0; j< 3; j++){
              var item = arr[j];
              let area:BetArea = this._areaArray[item.betAreaType];
             area.updateCoin(item);
          }
    }
    private doGameStutasSC(param):void{
         //console.log("doGameStutasSC");
         var MyClass = App.Proto.build("LHDStatusData");
         var obj = MyClass.decode(param);
         this.doStatus(obj.lhdStatus);
    }

    private doSettleSC(param):void{
         //console.log("doSettleSC");
         var MyClass = App.Proto.build("LHDBillStatusData");
         var obj = MyClass.decode(param);
         this.doStatus(obj.lhdStatus);  
    
        
        egret.setTimeout(this.sendCard,this,2000,[obj.longCard.sid, obj.huCard.sid]);
        egret.setTimeout(this.settleAccounts,this,4000,obj);
       
          //console.log("playerBet : "+ obj.playerBet + " playerWinMoney : " + obj.playerWinMoney + " playerMoney : " + obj.playerMoney);
          //console.log("totalBet : "+ obj.totalBet + " totalWinMoney : " + obj.totalWinMoney );
    } 
    
    
}